// ==========================================================================
// 云捷GO自动生成业务逻辑层相关代码，只生成一次，按需修改,再次生成不会覆盖.
// 生成日期：{{.table.CreateTime}}
// 生成路径: app/service/{{.table.ModuleName}}/{{.table.BusinessName}}/{{.table.BusinessName}}_service.go
// 生成人：{{.table.FunctionAuthor}}
// ==========================================================================
package {{.table.BusinessName}}

import (
	"errors"
	"github.com/gin-gonic/gin"
	"time"
	{{.table.BusinessName}}Model "{{.table.PackageName}}/app/model/{{.table.ModuleName}}/{{.table.BusinessName}}"
	userService "{{.table.PackageName}}/app/service/system/user"
	"{{.table.PackageName}}/app/yjgframe/utils/convert"
	"{{.table.PackageName}}/app/yjgframe/utils/page"
)

//根据主键查询数据
func SelectRecordById(id {{.table.PkColumn.GoType}}) (*{{.table.BusinessName}}Model.Entity, error) {
	entity := &{{.table.BusinessName}}Model.Entity{ {{.table.PkColumn.GoField}}: id}
	_, err := entity.FindOne()
	return entity, err
}

//根据主键删除数据
func DeleteRecordById(id {{.table.PkColumn.GoType}}) bool {
	rs, err := (&{{.table.BusinessName}}Model.Entity{ {{.table.PkColumn.GoField}}: id}).Delete()
	if err == nil {
		if rs > 0 {
			return true
		}
	}
	return false
}

//批量删除数据记录
func DeleteRecordByIds(ids string) int64 {
	ida := convert.ToInt64Array(ids, ",")
	result, err := {{.table.BusinessName}}Model.DeleteBatch(ida...)
	if err != nil {
		return 0
	}
	return result
}

//添加数据
func AddSave(req *{{.table.BusinessName}}Model.AddReq, c *gin.Context) ({{.table.PkColumn.GoType}}, error) {
	var entity {{.table.BusinessName}}Model.Entity
	{{range $index, $column := .table.Columns}} {{if eq $column.IsInsert "1"}}
	entity.{{$column.GoField}} = req.{{$column.GoField}}{{end}} {{end}}
	entity.CreateTime = time.Now()
	entity.CreateBy = ""

	user := userService.GetProfile(c)

	if user != nil {
		entity.CreateBy = user.LoginName
	}

	_, err := entity.Insert()
	return entity.{{.table.PkColumn.GoField}}, err
}

//修改数据
func EditSave(req *{{.table.BusinessName}}Model.EditReq, c *gin.Context) (int64, error) {
	entity := &{{.table.BusinessName}}Model.Entity{ {{.table.PkColumn.GoField}}: req.{{.table.PkColumn.GoField}} }
	ok, err := entity.FindOne()

	if err != nil {
		return 0, err
	}

	if !ok {
		return 0, errors.New("数据不存在")
	}

	{{range $index, $column := .table.Columns}} {{if eq $column.IsEdit "1"}}
	entity.{{$column.GoField}} = req.{{$column.GoField}}{{end}} {{end}}
	entity.UpdateTime = time.Now()
	entity.UpdateBy = ""

	user := userService.GetProfile(c)

	if user == nil {
		entity.UpdateBy = user.LoginName
	}

	return entity.Update()
}

//根据条件查询数据
func SelectListAll(params *{{.table.BusinessName}}Model.SelectPageReq) ([]{{.table.BusinessName}}Model.Entity, error) {
	return {{.table.BusinessName}}Model.SelectListAll(params)
}

//根据条件分页查询数据
func SelectListByPage(params *{{.table.BusinessName}}Model.SelectPageReq) ([]{{.table.BusinessName}}Model.Entity, *page.Paging, error) {
	return {{.table.BusinessName}}Model.SelectListByPage(params)
}

// 导出excel
func Export(param *{{.table.BusinessName}}Model.SelectPageReq) (string, error) {
	head := []string{ {{range $index, $column := .table.Columns}} {{if eq $index 0}}"{{$column.ColumnComment}}"{{else}},"{{$column.ColumnComment}}"{{end}}{{end}}}
	col := []string{ {{range $index, $column := .table.Columns}} {{if eq $index 0}}"{{$column.ColumnName}}"{{else}},"{{$column.ColumnName}}"{{end}}{{end}}}
	return {{.table.BusinessName}}Model.SelectListExport(param, head, col)
}