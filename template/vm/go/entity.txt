// ==========================================================================
// 云捷GO自动生成数据库操作代码，无需手动修改，重新生成会自动覆盖.
// 生成日期：{{.table.CreateTime}}
// 生成路径: app/model/{{.table.ModuleName}}/{{.table.BusinessName}}/{{.table.BusinessName}}_entity.go
// 生成人：{{.table.FunctionAuthor}}
// ==========================================================================

package {{.table.BusinessName}}

import (
	"{{.table.PackageName}}/app/yjgframe/db"
	"time"
)

// 数据表映射结构体
type Entity struct { {{range $index, $column := .table.Columns}}
	{{if eq $column.IsPk "1"}} {{$column.GoField}}       {{if eq $column.GoType "Time"}}time.Time{{else}}{{$column.GoType}}{{end}}         `json:"{{$column.ColumnName}}" xorm:"not null pk autoincr comment('{{$column.ColumnComment}}') {{$column.ColumnType}}"`   {{else}} {{$column.GoField}}    {{if eq $column.GoType "Time"}}time.Time{{else}}{{$column.GoType}}{{end}}         `json:"{{$column.ColumnName}}" xorm:"comment('{{$column.ColumnComment}}') {{$column.ColumnType}}"`   {{end}} {{end}}
}

//映射数据表
func TableName() string {
	return "{{.table.TableName}}"
}

// 插入数据
func (e *Entity) Insert() (int64, error) {
	return db.Instance().Engine().Table(TableName()).Insert(e)
}

// 更新数据
func (e *Entity) Update() (int64, error) {
	return db.Instance().Engine().Table(TableName()).ID(e.{{.table.PkColumn.GoField}}).Update(e)
}

// 删除
func (e *Entity) Delete() (int64, error) {
	return db.Instance().Engine().Table(TableName()).ID(e.{{.table.PkColumn.GoField}}).Delete(e)
}

//批量删除
func DeleteBatch(ids ...int64) (int64, error) {
	return db.Instance().Engine().Table(TableName()).In("{{.table.PkColumn.ColumnName}}", ids).Delete(new(Entity))
}

// 根据结构体中已有的非空数据来获得单条数据
func (e *Entity) FindOne() (bool, error) {
	return db.Instance().Engine().Table(TableName()).Get(e)
}

// 根据条件查询
func Find(where, order string) ([]Entity, error) {
	var list []Entity
	err := db.Instance().Engine().Table(TableName()).Where(where).OrderBy(order).Find(&list)
	return list, err
}

//指定字段集合查询
func FindIn(column string, args ...interface{}) ([]Entity, error) {
	var list []Entity
	err := db.Instance().Engine().Table(TableName()).In(column, args).Find(&list)
	return list, err
}

//排除指定字段集合查询
func FindNotIn(column string, args ...interface{}) ([]Entity, error) {
	var list []Entity
	err := db.Instance().Engine().Table(TableName()).NotIn(column, args).Find(&list)
	return list, err
}